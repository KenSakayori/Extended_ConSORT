sum(n, p) 
[ <#n: { v : int | T }, p: { v : int | (=> (and (>= i 0) (<= i (- n 1))) (>= v 0)) } ref (0, n - 1, 0.5)> -> 
  <#n: { v : int | T }, p: { v : int | T } ref (0, n - 1, 0.) | { v : int | (>= v 0) }> ]
{
  if n <= 0 then {
    0
  } else {
    if n = 1 then {
      let x = *p in
      x
    } else {
      let x = *p in
      let m = n - 1 in
      let q = p + 1 in
      let s = sum(m, q) in
      let y = x + s in
      y
    }
  }
}

{
  let p = mkarray 3 in
  p := 4;
  let q = p + 1 in
  q := 5;
  let r = q + 1 in
  r := 6;
  alias(r = q + 1);
  alias(q = p + 1);
  let m = 3 in
  let x = sum(m, p) in
  assert(x >= 0);
  ()
}