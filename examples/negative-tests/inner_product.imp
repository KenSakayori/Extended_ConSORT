inner_product(n, p, q) 
[ <#n: { v : int | T }, p: { v : int | T } ref (0, n - 1, 0.5), q: { v : int | T } ref (0, n - 1, 0.5)> -> 
  <#n: { v : int | T }, p: { v : int | T } ref (0, n - 1, 0.0), q: { v : int | T } ref (0, n - 1, 0.0) | { v : int | T } > ]
{
  if n <= 0 then {
    0
  } else {
    let x = *p in
    let y = *q in
    let w = x * y in
    let p1 = p + 1 in
    let q1 = q + 1 in
    let m = n - 1 in
    let r = inner_product(m, p1, q1) in
    let z = r + w in
    z
  }
}

init(n, p) 
[ <#n: { v : int | T }, p: { v : int | T } ref (0, n - 1, 1.0)> -> 
  <#n: { v : int | T }, p: { v : int | (=> (and (>= i 0) (<= i (- n 1))) (= v 0)) } ref (0, n - 1, 1.0) | { v : int | T }> ]
{
  if n <= 0 then {
    0
  } else {
    p := 0;
    let q = p + 1 in
    let m = n - 1 in
    let d = init(m, q) in
    alias(q = p + 1);
    0
  }
}

{
  let p = mkarray 3 in
  let m = 3 in
  let d = init(m, p) in
  let x = inner_product(m, p, p) in
  assert(x >= 0);
  ()
}
