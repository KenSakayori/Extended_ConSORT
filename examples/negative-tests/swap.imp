swap(n, p, q) 
[ <#n: { v : int | T }, p: { v : int | T } ref (0, n - 1, 1.0), q: { v : int | T } ref (0, n - 1, 1.0)> -> 
  <#n: { v : int | T }, p: { v : int | T } ref (0, n - 1, 1.0), q: { v : int | T } ref (0, n - 1, 1.0) | T > ]
{
  if n <= 0 then {
    0
  } else {
    let x = *p in
    let y = *q in
    let p := y in
    let q := x in
    let p1 = p + 1 in
    let q1 = q + 1 in
    let m = n - 1 in
    let d = swap(m, p1, q1) in
    0
  }
}

{
  let p = mkarray 3 in
  let q = mkarray 3 in
  let m = 3 in
  let d = init(m, p) in
  let d = init(m, q) in
  q := 1;
  let r = q + 1 in
  r := 2;
  alias(r = q + 1);
  let d = swap(m, p, q) in
  let x = *p in
  assert(x = 1);
  let p1 = p + 1 in
  let y = *p1 in
  assert(y = 2);
  ()
}
