init_i(n, p) 
[ <#n: int, p: int ref> -> 
  <#n: int, p: int ref | int> ]
{
  if n <= 0 then {
    1
  } else {
    if n = 1 then {
      p := 0;
      1
    } else {
      let m = n - 1 in
      let q = p + m in
      q := 0;
      let d = init_i(m, p) in
      alias(q = p + m);
      1
    }
  }
}

verify(n, p)
[ <#n: int, p: int ref> -> 
  <#n: int, p: int ref | int> ]
{
  if n <= 0 then {
    1
  } else {
    if n = 1 then {
      let x = *p in
      assert(x = 0);
      1
    } else {
      let m = n - 1 in
      let q = p + m in
      let y = *q in
      assert(y = 0);
      let d = verify(m, p) in
      alias(q = p + m);
      1
    }
  }
}

{
  let p = mkarray 3 in
  let m = 3 in
  let d = init_i(m, p) in
  let d2 = verify(m, p) in
  ()
}
