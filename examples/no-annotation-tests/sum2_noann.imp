sum(n, p) 
[ <#n: int, p: { v : int | (=> (and (>= i 0) (<= i (- n 1))) (>= v 0)) } ref (0, n - 1, 0.5)> -> 
  <#n: int, p: int ref (0, n - 1, 0.) | int > ]
{
  if n <= 0 then {
    0
  } else {
    let x = *p in
    let q = p + 1 in
    let m = n - 1 in
    let s = sum(m, q) in
    let y = x + s in
    y
  }
}

init_x(n, x, p) 
[ <#n: int, x: int, p: int ref (0, n - 1, 1.0)> -> 
  <#n: int, x: int, p: int ref (0, n - 1, 1.0) | int > ]
{
  if n <= 0 then {
    1
  } else {
    p := x;
    let q = p + 1 in
    let m = n - 1 in
    let d = init_x(m, x, q) in
    alias(q = p + 1);
    1
  }
}

{
  let p = mkarray 3 in
  let m = 3 in
  let z = 1 in
  let d = init_x(m, z, p) in
  let x = sum(m, p) in
  assert(x >= 0);
  ()
}
