squared_norm(n, p) 
[ <#n: int, p: int ref> -> 
  <#n: int, p: int ref (0, n - 1, 0.) | int > ]
{
  if n <= 0 then {
    0
  } else {
    let x = *p in
    let w = x * x in
    let q = p + 1 in
    let m = n - 1 in
    let r = squared_norm(m, q) in
    let z = r + w in
    z
  }
}

init_x(n, x, p) 
[ <#n: int, x: int, p: int ref> -> 
  <#n: int, x: int, p: int ref | int > ]
{
  if n <= 0 then {
    1
  } else {
    p := x;
    let q = p + 1 in
    let m = n - 1 in
    let d = init_x(m, x, q) in
    alias(q = p + 1);
    1
  }
}

{
  let p = mkarray 3 in
  let m = 3 in
  let z = 1 in
  let d = init_x(m, z, p) in
  let x = squared_norm(m, p) in
  assert(x >= 0);
  ()
}
