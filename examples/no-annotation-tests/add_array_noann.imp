add_array(n, p, q, r) 
[ <#n: int, p: int ref, q: int ref, r: int ref> -> 
  <#n: int, p: int ref, q: int ref, r: int ref | int> ]
{
  if n <= 0 then {
    1
  } else {
    let x = *p in
    let y = *q in
    let z = x + y in
    r := z;
    if n = 1 then {
      1
    } else {
      let p1 = p + 1 in
      let q1 = q + 1 in
      let r1 = r + 1 in
      let m = n - 1 in
      let d = add_array(m, p1, q1, r1) in
      alias(r1 = r + 1);
      1
    }
  }
}

abs(m)
[ <m: int> -> <m: int | int> ]
{
  if m >= 0 then {
    let k = m in
    k
  } else {
    let k = m * (-1) in
    k
  }
}

init_x(n, x, p) 
[ <#n: int, x: int, p: int ref> -> 
  <#n: int, x: int, p: int ref | int > ]
{
  if n <= 0 then {
    1
  } else {
    p := x;
    if n = 1 then {
      1
    } else {
      let q = p + 1 in
      let m = n - 1 in
      let d = init_x(m, x, q) in
      alias(q = p + 1);
      1
    }
  }
}

{
  let p = mkarray 10 in
  let q = mkarray 10 in
  let r = mkarray 10 in
  let m = 10 in
  let rand = _ in
  let z = abs(rand) in
  let d = init_x(m, z, p) in
  let d1 = init_x(m, z, q) in
  let d2 = add_array(m, p, q, r) in
  let rr = *r in
  assert(rr >= 0);
  ()
}
