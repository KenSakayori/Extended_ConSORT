sat
(
  (define-fun P0_pp ((x!0 Int)) Bool
    (let ((a!1 (exists ((x!1 Int))
                 (! (and (= x!1 3)
                         (or (not (>= x!1 1)) (not (>= x!0 2)))
                         (or (not (<= x!0 0)) (not (>= x!1 1))))
                    :weight 0))))
      (or a!1 (and (not (>= x!0 2)) (not (<= x!0 0))))))
  (define-fun P1_p_3_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 0)))
                    (or (not (= x!0 0)) (not (>= x!1 2)))
                    (not (<= x!2 0)))))
      (or (not (<= x!0 0)) (not (<= 0 x!0)) a!1)))
  (define-fun P1_m ((x!0 Int) (x!1 Int)) Bool
    (and (not (<= x!1 0)) (= x!0 (+ (- 1) x!1))))
  (define-fun P0_qq ((x!0 Int)) Bool
    (and (not (>= x!0 2)) (not (<= x!0 0))))
  (define-fun P0_p_1 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P0_r_3 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P0_m ((x!0 Int)) Bool
    (= x!0 3))
  (define-fun P0_q_3 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P1_q_2 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P0_d ((x!0 Int)) Bool
    (= x!0 1))
  (define-fun P1_p_1_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P1_p_1_if ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P0_p_9 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 2)))
                    (or (not (= x!0 0)) (not (>= x!1 2)))
                    (or (not (<= x!1 0)) (not (= x!0 0)))
                    (or (not (= x!0 1)) (not (>= x!1 2)))
                    (or (not (<= x!1 0)) (not (= x!0 1)))
                    (or (not (= x!0 2)) (not (>= x!1 2)))))
          (a!2 (exists ((x!3 Int))
                 (! (and (= x!3 3)
                         (or (not (<= x!1 0)) (not (= x!0 2)) (not (>= x!3 3)))
                         (or (not (= x!0 0)) (not (>= x!3 1)) (not (>= x!1 2)))
                         (or (not (= x!0 1)) (not (>= x!3 2)) (not (>= x!1 2)))
                         (or (not (= x!0 2)) (not (>= x!3 3)) (not (>= x!1 2)))
                         (or (not (= x!0 0)) (not (<= x!1 0)) (not (>= x!3 1)))
                         (or (not (= x!0 1)) (not (<= x!1 0)) (not (>= x!3 2))))
                    :weight 0))))
      (or (not (<= x!0 2)) (not (<= 0 x!0)) a!1 a!2)))
  (define-fun P1_q_3_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (exists ((x!3 Int))
                 (! (and (or (not (<= x!1 0)) (not (= x!3 0)))
                         (or (not (= x!3 0)) (not (>= x!1 2)))
                         (not (<= x!2 0))
                         (= x!0 (+ (- 1) x!3)))
                    :weight 0)))
          (a!2 (exists ((x!3 Int))
                 (! (and (or (not (<= x!1 0)) (not (= x!3 0)))
                         (or (not (= x!3 0)) (not (>= x!1 2)))
                         (not (<= x!2 0))
                         (= x!0 (+ (- 1) x!3)))
                    :weight 0))))
      (or (not (<= 0 x!0)) a!1 a!2 (not (<= x!0 (+ (- 2) x!2))))))
  (define-fun P1_d ((x!0 Int)) Bool
    (let ((a!1 (exists ((x!1 Int))
                 (! (and (= x!0 1) (not (<= x!1 0))) :weight 0))))
      (or (= x!0 1) a!1)))
  (define-fun P0_r_12 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (exists ((x!3 Int))
                 (! (and (or (not (<= x!1 0)) (not (= x!3 1)))
                         (or (not (= x!3 0)) (not (>= x!1 2)))
                         (or (not (<= x!1 0)) (not (= x!3 0)))
                         (or (not (= x!3 1)) (not (>= x!1 2)))
                         (= x!0 (+ (- 1) x!3)))
                    :weight 0))))
      (or (not (<= x!0 0)) a!1 (not (<= (- 2) x!0)))))
  (define-fun P1_q_5_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 1)) (not (>= x!2 3)))
                    (or (not (= x!0 0)) (not (>= x!1 2)) (not (>= x!2 2)))
                    (or (not (= x!0 1)) (not (>= x!2 3)) (not (>= x!1 2)))
                    (or (not (<= x!1 0)) (not (= x!0 0)) (not (>= x!2 2)))))
          (a!2 (exists ((x!3 Int))
                 (! (and (or (not (<= x!1 0)) (not (= x!0 2)) (not (>= x!3 3)))
                         (or (not (= x!0 0)) (not (>= x!3 1)) (not (>= x!1 2)))
                         (or (not (= x!0 1)) (not (>= x!3 2)) (not (>= x!1 2)))
                         (or (not (= x!0 2)) (not (>= x!3 3)) (not (>= x!1 2)))
                         (or (not (= x!0 0)) (not (<= x!1 0)) (not (>= x!3 1)))
                         (or (not (= x!0 1)) (not (<= x!1 0)) (not (>= x!3 2)))
                         (not (<= x!2 0))
                         (= x!3 (+ (- 1) x!2)))
                    :weight 0))))
      (or a!1 a!2)))
  (define-fun P0_p_6 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 2)))
                    (or (not (= x!0 0)) (not (>= x!1 2)))
                    (or (not (<= x!1 0)) (not (= x!0 0)))
                    (or (not (= x!0 1)) (not (>= x!1 2)))
                    (or (not (<= x!1 0)) (not (= x!0 1)))
                    (or (not (= x!0 2)) (not (>= x!1 2)))))
          (a!2 (exists ((x!3 Int))
                 (! (and (= x!3 3)
                         (or (not (<= x!1 0)) (not (= x!0 2)) (not (>= x!3 3)))
                         (or (not (= x!0 0)) (not (>= x!3 1)) (not (>= x!1 2)))
                         (or (not (= x!0 1)) (not (>= x!3 2)) (not (>= x!1 2)))
                         (or (not (= x!0 2)) (not (>= x!3 3)) (not (>= x!1 2)))
                         (or (not (= x!0 0)) (not (<= x!1 0)) (not (>= x!3 1)))
                         (or (not (= x!0 1)) (not (<= x!1 0)) (not (>= x!3 2))))
                    :weight 0))))
      (or a!1 a!2)))
  (define-fun P0_x ((x!0 Int)) Bool
    (= x!0 1))
  (define-fun P1_ret ((x!0 Int)) Bool
    (= x!0 1))
  (define-fun P0_p_2 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P1_p_b ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P0_rr ((x!0 Int)) Bool
    (let ((a!1 (exists ((x!1 Int))
                 (! (and (or (not (<= x!0 0)) (not (= x!1 1)))
                         (or (not (= x!1 0)) (not (>= x!0 2)))
                         (or (not (<= x!0 0)) (not (= x!1 0)))
                         (or (not (= x!1 1)) (not (>= x!0 2)))
                         (= 1 x!1))
                    :weight 0))))
      (or a!1 (and (not (<= x!0 0)) (not (>= x!0 2))))))
  (define-fun P1_q_6_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (exists ((x!3 Int) (x!4 Int))
                 (! (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!4 0)))
                                    (or (not (= x!4 0)) (not (>= x!1 2)))
                                    (not (<= x!2 0))))
                          (a!3 (or (not (<= x!1 0))
                                   (not (= x!3 1))
                                   (not (>= x!2 3))))
                          (a!4 (or (not (>= x!2 3))
                                   (not (= x!3 1))
                                   (not (>= x!1 2))))
                          (a!5 (or (not (<= x!1 0))
                                   (not (= x!3 0))
                                   (not (>= x!2 2)))))
                    (let ((a!2 (or (not (<= x!4 0)) a!1 (not (<= 0 x!4)))))
                      (and a!2
                           a!3
                           (or (not (= x!3 0))
                               (not (>= x!2 2))
                               (not (>= x!1 2)))
                           a!4
                           a!5
                           (= x!0 (+ (- 1) x!4))
                           (not (<= x!2 0))
                           (= x!3 (+ (- 1) x!4)))))
                    :weight 0)))
          (a!2 (exists ((x!3 Int) (x!4 Int))
                 (! (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!4 0)))
                                    (or (not (= x!4 0)) (not (>= x!1 2)))
                                    (not (<= x!2 0))))
                          (a!3 (or (not (<= x!1 0))
                                   (not (= x!3 1))
                                   (not (>= x!2 3))))
                          (a!4 (or (not (>= x!2 3))
                                   (not (= x!3 1))
                                   (not (>= x!1 2))))
                          (a!5 (or (not (<= x!1 0))
                                   (not (= x!3 0))
                                   (not (>= x!2 2))))
                          (a!7 (exists ((x!5 Int))
                                 (! (and (or (not (<= x!1 0))
                                             (not (= x!3 2))
                                             (not (>= x!5 3)))
                                         (or (not (= x!3 0))
                                             (not (>= x!5 1))
                                             (not (>= x!1 2)))
                                         (or (not (= x!3 1))
                                             (not (>= x!5 2))
                                             (not (>= x!1 2)))
                                         (or (not (= x!3 2))
                                             (not (>= x!5 3))
                                             (not (>= x!1 2)))
                                         (or (not (>= x!5 1))
                                             (not (<= x!1 0))
                                             (not (= x!3 0)))
                                         (or (not (= x!3 1))
                                             (not (<= x!1 0))
                                             (not (>= x!5 2)))
                                         (not (<= x!2 0))
                                         (= x!5 (+ (- 1) x!2)))
                                    :weight 0))))
                    (let ((a!2 (or (not (<= x!4 0)) a!1 (not (<= 0 x!4))))
                          (a!6 (and a!3
                                    (or (not (= x!3 0))
                                        (not (>= x!1 2))
                                        (not (>= x!2 2)))
                                    a!4
                                    a!5)))
                      (and a!2
                           (or a!6 a!7)
                           (= x!0 (+ (- 1) x!4))
                           (not (<= x!2 0))
                           (= x!3 (+ (- 1) x!4)))))
                    :weight 0))))
      (or (not (<= (- 1) x!0)) a!1 a!2 (not (<= x!0 (- 2))))))
  (define-fun P0_q_9 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (and (or (not (<= x!1 0)) (not (= x!0 1)))
         (or (not (= x!0 0)) (not (>= x!1 2)))
         (or (not (<= x!1 0)) (not (= x!0 0)))
         (or (not (= x!0 1)) (not (>= x!1 2)))))
  (define-fun P0_q_2 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P1_p_2_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (and (or (not (<= x!1 0)) (not (= x!0 0)))
         (or (not (= x!0 0)) (not (>= x!1 2)))
         (not (<= x!2 0))))
  (define-fun P1_n ((x!0 Int)) Bool
    (let ((a!1 (exists ((x!1 Int))
                 (! (and (not (<= x!1 0)) (= x!0 (+ (- 1) x!1))) :weight 0))))
      (or (= x!0 3) (not (<= x!0 (- 1))) a!1)))
  (define-fun P1_x ((x!0 Int)) Bool
    (= x!0 1))
  (define-fun P1_p_1 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P1_p_2 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (exists ((x!3 Int))
                 (! (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 0)))
                                    (or (not (= x!0 0)) (not (>= x!1 2)))
                                    (not (<= x!2 0))))
                          (a!3 (or (not (<= x!1 0))
                                   (not (= x!3 1))
                                   (not (>= x!2 3))))
                          (a!4 (or (not (= x!3 1))
                                   (not (>= x!1 2))
                                   (not (>= x!2 3))))
                          (a!5 (or (not (<= x!1 0))
                                   (not (= x!3 0))
                                   (not (>= x!2 2)))))
                    (let ((a!2 (or (not (<= x!0 0)) (not (<= 0 x!0)) a!1)))
                      (and a!2
                           a!3
                           (or (not (= x!3 0))
                               (not (>= x!1 2))
                               (not (>= x!2 2)))
                           a!4
                           a!5
                           (not (<= x!2 0))
                           (= x!3 (+ (- 1) x!0)))))
                    :weight 0)))
          (a!3 (and (or (not (<= x!1 0)) (not (>= x!2 3)) (not (= x!0 2)))
                    (or (not (= x!0 0)) (not (>= x!1 2)) (not (>= x!2 1)))
                    (or (not (= x!0 1)) (not (>= x!1 2)) (not (>= x!2 2)))
                    (or (not (>= x!2 3)) (not (= x!0 2)) (not (>= x!1 2)))
                    (or (not (<= x!1 0)) (not (= x!0 1)) (not (>= x!2 2)))
                    (or (not (<= x!1 0)) (not (= x!0 0)) (not (>= x!2 1)))))
          (a!4 (exists ((x!3 Int))
                 (! (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 0)))
                                    (or (not (= x!0 0)) (not (>= x!1 2)))
                                    (not (<= x!2 0))))
                          (a!3 (or (not (<= x!1 0))
                                   (not (= x!3 1))
                                   (not (>= x!2 3))))
                          (a!4 (or (not (= x!3 1))
                                   (not (>= x!1 2))
                                   (not (>= x!2 3))))
                          (a!5 (or (not (<= x!1 0))
                                   (not (= x!3 0))
                                   (not (>= x!2 2)))))
                    (let ((a!2 (or (not (<= x!0 0)) (not (<= 0 x!0)) a!1)))
                      (and a!2
                           a!3
                           (or (not (= x!3 0))
                               (not (>= x!2 2))
                               (not (>= x!1 2)))
                           a!4
                           a!5
                           (not (<= x!2 0))
                           (= x!3 (+ (- 1) x!0)))))
                    :weight 0))))
    (let ((a!2 (or (not (<= 0 x!0)) (not (<= x!0 (+ (- 1) x!2))) a!1)))
      (or (<= x!2 0) (and a!2 (not (<= x!2 0))) a!3 a!4))))
  (define-fun P1_p_6_el ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (let ((a!1 (exists ((x!3 Int))
                 (! (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 0)))
                                    (or (not (= x!0 0)) (not (>= x!1 2)))
                                    (not (<= x!2 0))))
                          (a!2 (or (not (<= x!1 0))
                                   (not (= x!3 1))
                                   (not (>= x!2 3))))
                          (a!3 (or (not (= x!3 1))
                                   (not (>= x!2 3))
                                   (not (>= x!1 2))))
                          (a!4 (or (not (<= x!1 0))
                                   (not (= x!3 0))
                                   (not (>= x!2 2)))))
                      (and (or (not (<= x!0 0)) (not (<= 0 x!0)) a!1)
                           a!2
                           (or (not (= x!3 0))
                               (not (>= x!2 2))
                               (not (>= x!1 2)))
                           a!3
                           a!4
                           (not (<= x!2 0))
                           (= x!3 (+ (- 1) x!0))))
                    :weight 0)))
          (a!2 (exists ((x!3 Int))
                 (! (let ((a!1 (and (or (not (<= x!1 0)) (not (= x!0 0)))
                                    (or (not (= x!0 0)) (not (>= x!1 2)))
                                    (not (<= x!2 0))))
                          (a!2 (or (not (<= x!1 0))
                                   (not (= x!3 1))
                                   (not (>= x!2 3))))
                          (a!3 (or (not (= x!3 1))
                                   (not (>= x!2 3))
                                   (not (>= x!1 2))))
                          (a!4 (or (not (<= x!1 0))
                                   (not (= x!3 0))
                                   (not (>= x!2 2))))
                          (a!6 (exists ((x!4 Int))
                                 (! (and (or (not (<= x!1 0))
                                             (not (= x!3 2))
                                             (not (>= x!4 3)))
                                         (or (not (= x!3 0))
                                             (not (>= x!4 1))
                                             (not (>= x!1 2)))
                                         (or (not (= x!3 1))
                                             (not (>= x!4 2))
                                             (not (>= x!1 2)))
                                         (or (not (= x!3 2))
                                             (not (>= x!4 3))
                                             (not (>= x!1 2)))
                                         (or (not (= x!3 0))
                                             (not (<= x!1 0))
                                             (not (>= x!4 1)))
                                         (or (not (<= x!1 0))
                                             (not (= x!3 1))
                                             (not (>= x!4 2)))
                                         (not (<= x!2 0))
                                         (= x!4 (+ (- 1) x!2)))
                                    :weight 0))))
                    (let ((a!5 (and a!2
                                    (or (not (= x!3 0))
                                        (not (>= x!1 2))
                                        (not (>= x!2 2)))
                                    a!3
                                    a!4)))
                      (and (or (not (<= 0 x!0)) (not (<= x!0 0)) a!1)
                           (or a!5 a!6)
                           (not (<= x!2 0))
                           (= x!3 (+ (- 1) x!0)))))
                    :weight 0))))
      (or a!1 (not (<= 0 x!0)) (not (<= x!0 (+ (- 1) x!2))) a!2)))
  (define-fun P1_p_e ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    (and (or (not (<= x!1 0)) (not (>= x!2 3)) (not (= x!0 2)))
         (or (not (= x!0 0)) (not (>= x!1 2)) (not (>= x!2 1)))
         (or (not (= x!0 1)) (not (>= x!1 2)) (not (>= x!2 2)))
         (or (not (>= x!2 3)) (not (= x!0 2)) (not (>= x!1 2)))
         (or (not (<= x!1 0)) (not (= x!0 0)) (not (>= x!2 1)))
         (or (not (<= x!1 0)) (not (= x!0 1)) (not (>= x!2 2)))))
  (define-fun P0_q_12 ((x!0 Int) (x!1 Int) (x!2 Int)) Bool
    true)
  (define-fun P0_n ((x!0 Int)) Bool
    false)
)
